<?xml version="1.0" encoding="UTF-8"?>
<!--

 Authors: Marco Barisione, Emanuele Aina
 Copyright (C) 2005-2007 Marco Barisione <barisione@gmail.com>
 Copyright (C) 2005-2007 Emanuele Aina

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="scade" _name="Scade" version="2.0" _section="Sources">
    <metadata>
      <property name="mimetypes">text/x-scade;text/x-scadesrc;image/x-xpixmap</property>
      <property name="globs">*.scade</property>
      <property name="block-comment-start">/*</property>
      <property name="block-comment-end">*/</property>
    </metadata>

    <styles>
        <style id="comment"           _name="Comment"             map-to="def:comment"/>
        <style id="error"             _name="Error"               map-to="def:error"/>
        <style id="string"            _name="String"              map-to="def:string"/>
        <style id="preprocessor"      _name="Preprocessor"        map-to="def:preprocessor"/>
        <style id="common-defines"    _name="Common Defines"      map-to="def:special-constant"/>
        <style id="included-file"     _name="Included File"       map-to="def:string"/>
        <style id="char"              _name="Character"           map-to="def:character"/>
        <style id="keyword"           _name="Keyword"             map-to="def:keyword"/>
        <style id="type"              _name="Data Type"           map-to="def:type"/>
        <style id="state-machine"     _name="State Machine"       map-to="def:type"/>
        <style id="escaped-character" _name="Escaped Character"   map-to="def:special-char"/>
        <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
        <style id="decimal"           _name="Decimal number"      map-to="def:decimal"/>
        <style id="octal"             _name="Octal number"        map-to="def:base-n-integer"/>
        <style id="hexadecimal"       _name="Hexadecimal number"  map-to="def:base-n-integer"/>
        <style id="boolean"           _name="Boolean value"       map-to="def:boolean"/>
    </styles>

    <definitions>
        <define-regex id="symbolchar">[&gt;-]</define-regex>
        
        <define-regex id="escaped-character" extended="true">
            \\(                   # leading backslash
            [\\\"\'nrbtfav\?] |   # escaped character
            [0-7]{1,3} |          # one, two, or three octal digits
            x[0-9A-Fa-f]+         # 'x' followed by hex digits
            )
        </define-regex>

        <context id="scade" class="no-spell-check">
            <include>

                <!-- gtk-doc -->
                <context ref="gtk-doc:inline-docs-section"/>
                <!-- Comments -->
                <context id="comment-multiline" style-ref="comment" class="comment" class-disabled="no-spell-check">
                    <start>/\*</start>
                    <end>\*/</end>
                    <include>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

                <context id="close-comment-outside-comment" style-ref="error">
                    <match>\*/(?!\*)</match>
                </context>

                <!-- Preprocessor -->
                <define-regex id="preproc-start">\s*#\s*</define-regex>

                <!-- 
                <context id="if0-comment" style-ref="comment">
                    <start>\%{preproc-start}if\b\s*0\b</start>
                    <end>\%{preproc-start}(endif|else|elif)\b</end>
                    <include>
                        <context id="if-in-if0">
                            <start>\%{preproc-start}if(n?def)?\b</start>
                            <end>\%{preproc-start}endif\b</end>
                            <include>
                                <context ref="if-in-if0"/>
                                <context ref="def:in-comment"/>
                            </include>
                        </context>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

                <context id="include" style-ref="preprocessor">
                    <match extended="true">
                            \%{preproc-start}
                            (include|import)\s*
                            (".*?"|&lt;.*&gt;)
                    </match>
                    <include>
                        <context id="included-file" sub-pattern="2" style-ref="included-file"/>
                    </include>
                </context>
                -->

                <context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
                    <start>\%{preproc-start}pragma\b</start>
                    <end>\%{preproc-start}end\b</end>
                    <include>
                        <context ref="def:line-continue" ignore-style="true"/>
                        <context ref="string" ignore-style="true"/>
                        <context ref="comment-multiline"/>
                    </include>
                </context>

                <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
                    <start>L?"</start>
                    <end>"</end>
                    <include>
                        <context id="escaped-character" style-ref="escaped-character">
                            <match>\%{escaped-character}</match>
                        </context>
                        <context ref="def:line-continue"/>
                    </include>
                </context>

                <context id="char" style-ref="char">
                    <match>L?'(\%{escaped-character}|.)'</match>
                </context>

                <!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
                <context id="float" style-ref="floating-point">
                    <match extended="true">
                        (?&lt;![\w\.])
                        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
                         ([0-9]+[Ee][+-]?[0-9]*))
                        [fFlL]?
                        (?![\w\.])
                    </match>
                </context>

                <context id="hexadecimal" style-ref="hexadecimal">
                    <match extended="true">
                        (?&lt;![\w\.])
                        0[xX][a-fA-F0-9]+[uUlL]*
                        (?![\w\.])
                    </match>
                </context>

                <context id="octal" style-ref="octal">
                    <match extended="true">
                        (?&lt;![\w\.])
                        0[0-7]+[uUlL]*
                        (?![\w\.])
                    </match>
                </context>

                <context id="decimal" style-ref="decimal">
                    <match extended="true">
                        (?&lt;![\w\.])
                        [0-9]+[uUlL]*
                        (?![\w\.])
                    </match>
                </context>

                <!-- Keywords -->
                <context id="keywords" style-ref="keyword" class="keyword">
                    <keyword>type</keyword>
                    <keyword>else</keyword>
                    <keyword>if</keyword>
                    <keyword>node</keyword>
                    <keyword>returns</keyword>
                    <keyword>then</keyword>
                    <keyword>returns</keyword>
                    <keyword>var</keyword>
                    <keyword>let</keyword>
                    <keyword>tel</keyword>
                    <keyword>package</keyword>
                    <keyword>public</keyword>
                    <keyword>private</keyword>
                    <keyword>imported</keyword>
                    <keyword>open</keyword>
                    <keyword>group</keyword>
                    <keyword>const</keyword>
                    <keyword>sensor</keyword>
                    <keyword>function</keyword>
                    <keyword>when</keyword>
                    <keyword>not</keyword>
                    <keyword>or</keyword>
                    <keyword>and</keyword>
                    <keyword>xor</keyword>
                    <keyword>mod</keyword>
                    <keyword>end</keyword>
                    <keyword>pre</keyword>
                    <keyword>last</keyword>
                    <keyword>default</keyword>
                    <keyword>sig</keyword>
                    <keyword>automaton</keyword>
                    <keyword>state</keyword>
                    <keyword>restart</keyword>
                    <keyword>resume</keyword>
                    <keyword>every</keyword>
                    <keyword>times</keyword>
                    <keyword>do</keyword>
                    <keyword>emit</keyword>
                    <keyword>case</keyword>
                    <keyword>of</keyword>
                    <!-- Special functions -->
                    <keyword>fby</keyword>
                    <keyword>merge</keyword>
                    <keyword>flatten</keyword>
                </context>

                <context id="type-or-constructor" style-ref="type">
                    <match>\b['][a-zA-Z_][0-9a-zA-Z_]*</match>
                </context>
                <context id="types" style-ref="type" class="type">
                    <keyword>bool</keyword>
                    <keyword>char</keyword>
                    <keyword>int</keyword>
                    <keyword>real</keyword>
                    <keyword>clock</keyword>
                    <keyword>probe</keyword>
                </context>
                
                <context id="keysymbol" style-ref="keyword">
                  <prefix>(?&lt;!\%{symbolchar})</prefix>
                  <suffix>(?!\%{symbolchar})</suffix>
                  <keyword>-&gt;</keyword>
                </context>

                <context id="state-machine" style-ref="state-machine" class="state-machine">
                    <keyword>initial</keyword>
                    <keyword>final</keyword>
                    <keyword>unless</keyword>
                    <keyword>until</keyword>
                    <keyword>synchro</keyword>
                </context>

                <!-- C99 booleans -->
                <context id="boolean" style-ref="boolean" class="boolean">
                    <keyword>true</keyword>
                    <keyword>false</keyword>
                </context>

            </include>
        </context>
    </definitions>
</language>
