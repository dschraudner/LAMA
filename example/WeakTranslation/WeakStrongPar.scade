node WeakStrongPar(c0 : bool; c1 : bool; c2 : bool; c3 : bool)
  returns (
    state0 : bool default = false;
    state1 : bool default = false;
    state2 : bool default = false;
    state3 : bool default = false;
    state4 : bool default = false)
let
  automaton SM1
    initial state State0
      let
        state0 = true;
      tel
      until if c0 do restart State1;

    state State1
      unless if c2 restart State2;
      let
        state1 = true;
      tel
      until if c1 do restart State3;

    state State2
      let
        state2 = true;
      tel

    state State3
      unless if c3 restart State4;
      let
        state3 = true;
      tel

    state State4
      let
        state4 = true;
      tel
  returns ..;
tel

node Prop(c0 : bool; c1 : bool; c2 : bool; c3 : bool)
  returns (state0, state1, state2, state3, state4 : bool;
    c0_1, c1_1, state0_1, state1_1 : bool)
let
  state0, state1, state2, state3, state4
    = WeakStrongPar(c0, c1, c2, c3);

  c0_1 = false -> pre c0;
  c1_1 = false -> pre c1;
  state0_1 = true -> pre state0;
  state1_1 = false -> pre state1;
tel

/*

with proper names:

invariant
  (and (and (and (and (and
    (=> (and (and state0_1 c0_1) (not c2)) state1_out) -- CondAssoc
    (=> (and state1_1 (and (not c1_1) (not c2))) state1_out)) -- FF
    (=> (and state1_1 (and (not c1_1) c2)) state2_out)) -- FT
    (=> (and state1_1 (and c1_1 (not c2))) (or state3_out state4_out))) -- TF
    (=> (and state1_1 (and c1_1 c2)) (or state3_out state4_out))) -- TT
    (=> (and state1_1 (and c3 (and c1_1 (not c2)))) state4_out)) -- Transitive
  ;

in current implementation:

invariant
  (and (and (and (and (and
    (=> (and (and state0_1_out c0_1_out) (not c2)) state1_out) -- CondAssoc
    (=> (and state1_1_out (and (not c1_1_out) (not c2))) state1_out)) -- FF
    (=> (and state1_1_out (and (not c1_1_out) c2)) state2_out)) -- FT
    (=> (and state1_1_out (and c1_1_out (not c2))) (or state3_out state4_out))) -- TF
    (=> (and state1_1_out (and c1_1_out c2)) (or state3_out state4_out))) -- TT
    (=> (and state1_1_out (and c3 (and c1_1_out (not c2)))) state4_out)) -- Transitive
  ;

as command:

./translate.sh WeakTranslation/WeakStrongPar.scade Prop "(and (and (and (and (and
  (=> (and (and state0_1_out c0_1_out) (not c2)) state1_out) -- CondAssoc
  (=> (and state1_1_out (and (not c1_1_out) (not c2))) state1_out)) -- FF
  (=> (and state1_1_out (and (not c1_1_out) c2)) state2_out)) -- FT
  (=> (and state1_1_out (and c1_1_out (not c2))) (or state3_out state4_out))) -- TF
  (=> (and state1_1_out (and c1_1_out c2)) (or state3_out state4_out))) -- TT
  (=> (and state1_1_out (and c3 (and c1_1_out (not c2)))) state4_out)) -- Transitive"

*/
