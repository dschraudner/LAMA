node NestedStates(c1 : bool; c2 : bool)
  returns (inA, inA1, inA2, inB : bool default = false)
let

  automaton SM1
    initial state A
      unless if c2 restart B;
      let
        inA = true;

        automaton SM2
          initial state A1
            unless if c1 restart A2;
            let inA1 = true; tel

          state A2
            unless if c1 restart A1;
            let inA2 = true; tel
        returns ..;
      tel

    state B
      unless if c2 resume A;
      let inB = true; tel
  returns ..;
tel

node Observer(c1 : bool; c2 : bool)
  returns (inA, inA1, inA2, inB : bool;
    inA_2, inB_1, inA1_2, inA2_2 : bool)
let
  inA, inA1, inA2, inB
    = NestedStates(c1, c2);

  inA_2 = fby(inA; 2; true);
  inB_1 = fby(inB; 1; false);
  inA1_2 = fby(inA1; 2; true);
  inA2_2 = fby(inA2; 2; false);
tel

/*

with proper names:

invariant
  (=> (and (and inA_2 inB_1) (and inA (not c1)))
    (and (= inA1 inA1_2)
      (= inA2 inA2_2)))
  ;

with current names:

invariant
  (=> (and (and inA_2_out inB_1_out) (and inA_out (not c1)))
    (and (= inA1_out inA1_2_out)
      (= inA2_out inA2_2_out)))
  ;

command:
./translate.sh NestedStateMachine.scade Observer "(=> (and (and inA_2_out inB_1_out) (and inA_out (not c1)))
    (and (= inA1_out inA1_2_out)
      (= inA2_out inA2_2_out)))"
./runInd.sh tmp/NestedStateMachine.lm Observer
*/
