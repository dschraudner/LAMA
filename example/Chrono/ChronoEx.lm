nodes
  node chrono (StSt, Rst : bool) returns (disp_1, disp_2 : int); let
    nodes node button (StSt : bool; internal_reset : bool) returns (so, mo : int; run : bool); let
      local
        run : bool;
        s, m, d : int;
      state
        s_1, m_1, d_1_START : int;
      transition
        s_1' = s;
        m_1' = m;
        d_1_START' = d;
      output
        so = s;
        mo = m;

      automaton let
        location STOP let
          definition
            run = false;
            d = d_1_START;
            s = s_1;
            m = m_1;
        tel
        location START let
          definition
            run = true;
            d = (mod (+ d_1_START 1) 100);
            s = (ite (< d d_1_START) (mod (+ s_1 1) 60) s_1);
            m = (ite (< s s_1) (mod (+ m_1 1) 60) m_1);
        tel
        location INTERNAL_RESET let
          definition
            run = false;
            s = 0;
            m = 0;
            d = 0;
        tel
        initial STOP;
        edge (STOP, START) : StSt;
        edge (STOP, INTERNAL_RESET) : internal_reset;
        edge (STOP, STOP) : (and (not StSt) (not internal_reset));
        edge (START, STOP) : StSt;
        edge (START, INTERNAL_RESET) : internal_reset;
        edge (START, START) : (and (not StSt) (not internal_reset));
        edge (INTERNAL_RESET, STOP) : true;
      tel
      initial s_1 = 0, m_1 = 0, d_1_START = 0;
    tel

    node timer (s, m : int; run : bool; Rst : bool) returns (disp_1_o, disp_2_o : int); let
      local
        disp_1, disp_2 : int;
      state
        disp_1_1, disp_2_1 : int;
        cond_1, cond_2 : bool;
      transition
        disp_1_1' = disp_1;
        disp_2_1' = disp_2;

        cond_1' = (and Rst run);
        cond_2' = Rst;
      output
        disp_1_o = disp_1;
        disp_2_o = disp_2;

      automaton let
        location TIME let
          definition
            disp_1 = s;
            disp_2 = m;
        tel
        location LAP let
          definition
            disp_1 = disp_1_1;
            disp_2 = disp_2_1;
        tel
        initial TIME;
        edge (TIME, LAP) : cond_1;
        edge (TIME, TIME) : (not cond_1);
        edge (LAP, TIME) : cond_2;
        edge (LAP, LAP) : (not cond_2);
      tel

      initial disp_1_1 = 0, disp_2_1 = 0, cond_1 = false, cond_2 = false;
    tel

    local
      r_button : int * int * bool;
      r_timer : int * int;
      s, m : int;
      run : bool;
    state
      internal_reset : bool;
    definition
      r_button = (use button StSt internal_reset);
      s = (match r_button {(prod s m run) . s});
      m = (match r_button {(prod s m run) . m});
      run = (match r_button {(prod s m run). run});
      r_timer = (use timer s m run Rst);
    transition
      internal_reset' = (and Rst (not run));
    output
      disp_1 = (match r_timer {(prod d1 d2). d1});
      disp_2 = (match r_timer {(prod d1 d2). d2});
    
    initial internal_reset = false;
  tel

-- Global flow
local
  StSt, Rst : bool;
  r : int * int;
definition
  r = (use chrono StSt Rst);
